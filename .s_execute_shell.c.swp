#include "main.h"

/**
 * execute_shell - Main loop of the shell program.
 * @env: Environmental variables.
 *
 * Return: Always 0.
 */
int execute_shell(const char **env) {
    char *line = NULL;
    size_t n = 0;
    ssize_t read;
    int last_exit_status = 0;

    while (1) {
        _printf("($) ");
        read = getline(&line, &n, stdin);
        if (read == -1) {
            perror("getline error");
            return (-1);
        }

        // Handle comments
        if (line[0] == '#') {
            free(line);
            line = NULL;
            n = 0;
            continue;
        }

        // Remove newline character if present
        if (line[read - 1] == '\n') {
            line[read - 1] = '\0';
        }

        char *command = strtok(line, " ");
        char *arguments[1024];
        int i = 1;

        if (command != NULL) {
            arguments[0] = command;
            while ((arguments[i] = strtok(NULL, " ")) != NULL) {
                i++;
            }

            // Handle built-in commands
            if (_strcmp(command, "exit") == 0) {
                if (arguments[1] != NULL) {
                    exit(_atoi(arguments[1]));
                } else {
                    exit(0);
                }
            } else if (_strcmp(command, "env") == 0) {
                shell_env(env);
            } else if (_strcmp(command, "echo") == 0) {
                if (arguments[1] != NULL) {
                    if (_strcmp(arguments[1], "$$") == 0) {
                        _printf("%d\n", getppid());
                    } else if (_strcmp(arguments[1], "$?") == 0) {
                        _printf("%d\n", last_exit_status);
                    } else {
                        execute_command(command, arguments, env);
                    }
                }
            } else if (_strcmp(command, "cd") == 0) {
                if (arguments[1] == NULL) {
                    char *home_dir = getenv("HOME");
                    if (home_dir != NULL) {
                        chdir(home_dir);
                    }
                } else {
                    chdir(arguments[1]);
                }
            } else {
                last_exit_status = execute_command(command, arguments, env);
            }
        }

        free(line);
        line = NULL;
        n = 0;
    }
    return 0;
}

